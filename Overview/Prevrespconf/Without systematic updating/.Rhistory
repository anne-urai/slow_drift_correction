summary(fit)
Anova(fit)
plot(effects::effect(c('prevresp'),fit))
fit <- glm(resp~evidence + prevresp*prev_cj,df,family=binomial)
vif(fit)
summary(fit)
Anova(fit)
plot(effects::effect(c('prevresp'),fit))
plot(effects::effect(c('prevresp:prev_cj'),fit))
df$prev_cj
plot(effects::effect(c('prevresp:prev_cj'),fit))
plot_resp <- data.frame(effects::effect('prevresp',fit))
ggplot(plot_resp, aes(prevresp,fit,group=1)) +
geom_errorbar(aes(ymin=fit-se, ymax=fit+se), width=.1,size=.5) +
geom_point(size=2) +
geom_line(size=1) +
labs(x="Previous response", y="P(right response)",color='Previous response') +
theme_bw() +
theme(text = element_text(size = 12),legend.position = "top") +
scale_colour_manual(values=c("#E69F00", "#56B4E9"))
plot_conf <- data.frame(effects::effect('prevresp:prev_cj',fit))
ggplot(plot_conf, aes(prev_cj,fit,color=prevresp)) +
geom_errorbar(aes(ymin=fit-se, ymax=fit+se), width=.1,size=.5) +
geom_point(size=2) +
geom_line(size=1,aes(color=prevresp)) +
labs(x="Previous confidence", y="P(right response)",color='Previous response') +
theme_bw() +
theme(text = element_text(size = 12),legend.position = "top") +
scale_colour_manual(values=c("#E69F00", "#56B4E9"))
fit <- glm(resp~evidence + prevevidence + prevresp*prev_cj,df,family=binomial)
vif(fit)
summary(fit)
Anova(fit)
plot(effects::effect(c('prevresp'),fit))
plot(effects::effect(c('prevresp:prev_cj'),fit))
plot_resp <- data.frame(effects::effect('prevresp',fit))
ggplot(plot_resp, aes(prevresp,fit,group=1)) +
geom_errorbar(aes(ymin=fit-se, ymax=fit+se), width=.1,size=.5) +
geom_point(size=2) +
geom_line(size=1) +
labs(x="Previous response", y="P(right response)",color='Previous response') +
theme_bw() +
theme(text = element_text(size = 12),legend.position = "top") +
scale_colour_manual(values=c("#E69F00", "#56B4E9"))
plot_conf <- data.frame(effects::effect('prevresp:prev_cj',fit))
ggplot(plot_conf, aes(prev_cj,fit,color=prevresp)) +
geom_errorbar(aes(ymin=fit-se, ymax=fit+se), width=.1,size=.5) +
geom_point(size=2) +
geom_line(size=1,aes(color=prevresp)) +
labs(x="Previous confidence", y="P(right response)",color='Previous response') +
theme_bw() +
theme(text = element_text(size = 12),legend.position = "top") +
scale_colour_manual(values=c("#E69F00", "#56B4E9"))
plot(df$crit)
library(ggplot2)
library(car)
library(dplyr)
rm(list=ls())
#Generate data with(out) slow drift in criterion
slowDrift = T #whether or not to implement slow drift (for sanity checks)
crit_variation = .005 #amount of variation in the slow drift (sd in normal distribution)
crit_range = .025 #amount of deviation in slow drift (range in  uniform distribution)
dprime = 2 #dprime
ntrials=20000
#add history bias
#add different d'
#add evidence in the model (cause we subselect trials with extreme evidence)
#generate empty data frame
df <- data.frame(matrix(NA,ncol=5,nrow=ntrials));names(df) <- c("resp","cor","evidence","cresp","crit")
#generate evidence for both options
#generate evidence for both options
df$evidence[1:(ntrials/2)] <- cbind(rnorm(ntrials/4,-(dprime/2)),rnorm(ntrials/4,-(dprime/4)))
df$evidence2[1:(ntrials/2)] <- cbind(rnorm(ntrials/4,-(dprime/2)),rnorm(ntrials/4,-(dprime/4)))
df$cresp[1:(ntrials/2)] <- 0
df$evidence[((ntrials/2)+1):ntrials] <- cbind(rnorm(ntrials/4,(dprime/2)),rnorm(ntrials/4,(dprime/4)))
df$evidence2[((ntrials/2)+1):ntrials] <- cbind(rnorm(ntrials/4,(dprime/2)),rnorm(ntrials/4,(dprime/4)))
df$cresp[((ntrials/2)+1):ntrials] <- 1
#Shuffle all trials so that there's no stimulus dependencies
df <- df[sample(1:ntrials),]
#generate (fluctuating) criterion
if(slowDrift){
#df$crit <- dprime/2 + cumsum(rnorm(ntrials,0,crit_variation)) #based on normal distribution
df$crit <- 0 + cumsum(runif(ntrials,-crit_range,crit_range)) #based on uniform distribution
}else{
df$crit <-  rep(0,ntrials)
}
#generate responses by comparing evidence to criterion
df$resp <- ifelse(df$evidence<df$crit,0,1)
df$cor <- ifelse(df$resp==df$cresp,1,0)
#Check for history effect
df$prevevidence <- lag(df$evidence)
df$prevabsevidence <- abs(df$prevevidence)
df$prevsignevidence <- as.factor(ifelse(df$prevevidence < 0, -1,1))
df$follcor <- lead(df$cor)
df$follresp <- lead(df$resp)
df$prevcor <- as.factor(lag(df$cor))
df$prevresp <- as.factor(lag(df$resp))
df$prevtarget <- as.factor(lag(df$cresp))
df$prev_cj_simple <- abs(lag(df$crit-df$evidence)) #first-order confidence
plot(df$crit)
library(dplyr)
library(car)
library(effects)
library(ggplot2)
library(lme4)
rm(list=ls())
slowDrift     = T #whether or not to implement slow drift
confUpdating  = F #whether or not to implement a systematic updating of previous confidence
crit_range    = .01 #amount of deviation in slow drift (range in  uniform distribution)
#crit_variation = .005 #amount of variation in the slow drift (sd in normal distribution)
dprime        = 2
ntrials       = 10000
#generate empty data frame
df <- data.frame(matrix(NA,ncol=5,nrow=ntrials));names(df) <- c("resp","cor","evidence","cresp","crit")
#generate evidence for both options
df$evidence[1:(ntrials/2)] <- cbind(rnorm(ntrials/4,-(dprime/2)),rnorm(ntrials/4,-(dprime/4)))
df$cresp[1:(ntrials/2)] <- 0
df$evidence[((ntrials/2)+1):ntrials] <- cbind(rnorm(ntrials/4,(dprime/2)),rnorm(ntrials/4,(dprime/4)))
df$cresp[((ntrials/2)+1):ntrials] <- 1
df$absevidence <- abs(df$evidence)
#Shuffle all trials so that there's no stimulus dependencies
df <- df[sample(1:ntrials),]
df$block <- rep(1:100,each=ntrials/100)
#generate additive part for slow drift
df$slowdrift <- runif(ntrials,-crit_range,crit_range)
#df$slowdrift <- rnorm(ntrials,0,crit_variation)
#initialize values first trial (then for second trial we can use variables from previous trial)
df$crit[1] <- 0
df$cj[1] <- 0
df$updating_cj[1] <- 0
df$resp[1] <- ifelse(df$evidence[1]<df$crit[1],0,1)
df$cor[1] <- ifelse(df$resp[1]==df$cresp[1],1,0)
for (j in 2:ntrials){
# shift_r <- runif(1,0,crit_range) #shift criterion towards right
# shift_l <- runif(1,-crit_range,0) #shift criterion towards left
shift_r <- .01 #shift criterion towards right
shift_l <- -.01 #shift criterion towards left
df$updating_cj[j] <- ifelse((df$resp[j-1] == 0 & df$cor[j-1] == 1) |
(df$resp[j-1] == 1 & df$cor[j-1] == 0), shift_r, shift_l)
if (slowDrift & confUpdating){
df$crit[j] <- df$crit[j-1] + df$slowdrift[j] + df$updating_cj[j]
} else if (slowDrift){
df$crit[j] <- df$crit[j-1] + df$slowdrift[j]
} else if(confUpdating){
df$crit[j] <- df$crit[j-1] + df$updating_cj[j]
} else{
df$crit[j] <- df$crit[j-1]
}
df$resp[j] <- ifelse(df$evidence[j]<df$crit[j],0,1)
df$cor[j] <- ifelse(df$resp[j]==df$cresp[j],1,0)
df$cj[j] <- abs(df$evidence[j] - df$crit[j])
}
plot(df$crit) # 0 is unbiased
dev.off()
plot(df$crit) # 0 is unbiased
library(dplyr)
library(car)
library(effects)
library(ggplot2)
library(lme4)
rm(list=ls())
slowDrift     = T #whether or not to implement slow drift
confUpdating  = F #whether or not to implement a systematic updating of previous confidence
crit_range    = .01 #amount of deviation in slow drift (range in  uniform distribution)
dprime        = 2
ntrials       = 10000
#generate empty data frame
df <- data.frame(matrix(NA,ncol=5,nrow=ntrials));names(df) <- c("resp","cor","evidence","cresp","crit")
#generate evidence for both options
df$evidence[1:(ntrials/2)] <- cbind(rnorm(ntrials/4,-(dprime/2)),rnorm(ntrials/4,-(dprime/4)))
df$cresp[1:(ntrials/2)] <- 0
df$evidence[((ntrials/2)+1):ntrials] <- cbind(rnorm(ntrials/4,(dprime/2)),rnorm(ntrials/4,(dprime/4)))
df$cresp[((ntrials/2)+1):ntrials] <- 1
df$absevidence <- abs(df$evidence)
#Shuffle all trials so that there's no stimulus dependencies
df <- df[sample(1:ntrials),]
df$block <- rep(1:100,each=ntrials/100)
#generate additive part for slow drift
df$slowdrift <- runif(ntrials,-crit_range,crit_range)
#initialize values first trial (then for second trial we can use variables from previous trial)
df$crit[1] <- 0
df$cj[1] <- 0
df$updating_cj[1] <- 0
df$resp[1] <- ifelse(df$evidence[1]<df$crit[1],0,1)
df$cor[1] <- ifelse(df$resp[1]==df$cresp[1],1,0)
for (j in 2:ntrials){
# shift_r <- runif(1,0,crit_range) #shift criterion towards right
# shift_l <- runif(1,-crit_range,0) #shift criterion towards left
shift_r <- .01 #shift criterion towards right
shift_l <- -.01 #shift criterion towards left
df$updating_cj[j] <- ifelse((df$resp[j-1] == 0 & df$cor[j-1] == 1) |
(df$resp[j-1] == 1 & df$cor[j-1] == 0), shift_r, shift_l)
if (slowDrift & confUpdating){
df$crit[j] <- df$crit[j-1] + df$slowdrift[j] + df$updating_cj[j]
} else if (slowDrift){
df$crit[j] <- .999*df$crit[j-1] + df$slowdrift[j]
} else if(confUpdating){
df$crit[j] <- df$crit[j-1] + df$updating_cj[j]
} else{
df$crit[j] <- df$crit[j-1]
}
df$resp[j] <- ifelse(df$evidence[j]<df$crit[j],0,1)
df$cor[j] <- ifelse(df$resp[j]==df$cresp[j],1,0)
df$cj[j] <- abs(df$evidence[j] - df$crit[j])
}
table(df$resp)
plot(df$crit) # 0 is unbiased
#Check for history effect
df$follcor <- lead(df$cor)
df$follresp <- lead(df$resp)
df$prevcor <- as.factor(lag(df$cor))
df$prevresp <- as.factor(lag(df$resp))
df$prevresp2 <- as.factor(lag(df$resp,2))
df$prevresp3 <- as.factor(lag(df$resp,3))
df$prevresp4 <- as.factor(lag(df$resp,4))
df$prevcj <- lag(df$cj)
df$prevcj2 <- lag(df$cj,2)
df$prevcj3 <- lag(df$cj,3)
df$prevcj4 <- lag(df$cj,4)
df$prevevidence <- lag(df$evidence)
df$prevabsevidence <- abs(df$prevevidence)
df$prevsignevidence <- as.factor(ifelse(df$prevevidence < 0, -1, 1))
df$prevtarget <- as.factor(lag(df$cresp))
df$repfollresp <- as.factor(ifelse(df$resp!=df$follresp, 0, 1))
table(df$resp,df$prevresp)
#fit <- glm(resp ~ evidence + prevresp * prevcj + prevresp2 * prevcj2 + prevresp3 * prevcj3 + prevresp4 * prevcj4,df,family=binomial)
fit <- glm(resp ~ evidence + prevsignevidence * prevabsevidence + prevresp * prevcj,df,family=binomial)
vif(fit)
plot((effects::effect('prevresp',fit)))
#fit <- glm(resp ~ evidence + prevresp * prevcj + prevresp2 * prevcj2 + prevresp3 * prevcj3 + prevresp4 * prevcj4,df,family=binomial)
fit <- glm(resp ~ evidence + prevresp * prevcj,df,family=binomial)
plot((effects::effect('prevresp',fit)))
Anova(fit)
ntrials = 500
df <- data.frame(matrix(NA,ncol=2,nrow=ntrials));names(df) <- c("value","corrected")
for (i in 1:ntrials){
print(i)
}
df$value[1] <- 0
df$value
?rnorm
ntrials = 500
df <- data.frame(matrix(NA,ncol=2,nrow=ntrials));names(df) <- c("value","corrected")
df$value[1] <- 0
for (i in 2:ntrials){
df$value[i] <- .9995 * df$value[i-1] + rnorm(1,0,.5)
}
plot(df$value)
ntrials = 500
df <- data.frame(matrix(NA,ncol=2,nrow=ntrials));names(df) <- c("value","corrected")
df$value[1] <- 0
for (i in 2:ntrials){
df$value[i] <- .95 * df$value[i-1] + rnorm(1,0,.5)
}
plot(df$value)
ntrials = 500
df <- data.frame(matrix(NA,ncol=2,nrow=ntrials));names(df) <- c("value","corrected")
df$value[1] <- 0
for (i in 2:ntrials){
df$value[i] <- .9995 * df$value[i-1] + rnorm(1,0,.5)
}
plot(df$value)
library(dplyr)
df$prev_value <- lag(df$value)
library(dplyr)
ntrials = 500
df <- data.frame(matrix(NA,ncol=2,nrow=ntrials));names(df) <- c("value","corrected")
df$value[1] <- 0
for (i in 2:ntrials){
df$value[i] <- .9995 * df$value[i-1] + rnorm(1,0,.5)
}
plot(df$value)
df$prev_value <- lag(df$value)
m <- lm(df,value ~ prev_value)
m <- lm(df$value ~ df$prev_value)
m
m <- lm(df$value ~ 0 + df$prev_value)
m
df$corrected_value <- df$value - mean(df$value)
library(dplyr)
ntrials = 500
df <- data.frame(matrix(NA,ncol=2,nrow=ntrials));names(df) <- c("value","corrected")
df$value[1] <- 0
for (i in 2:ntrials){
df$value[i] <- .9995 * df$value[i-1] + rnorm(1,0,.5)
}
plot(df$value)
df$corrected_value <- df$value - mean(df$value)
df$prev_corrected_value <- lag(df$corrected_value)
df$prev_value <- lag(df$value)
m <- lm(df$value ~ 0 + df$prev_value)
plot(df$corrected_value)
m_corrected <- lm(df$corrected$value ~ df$prev_corrected_value)
library(dplyr)
ntrials = 500
df <- data.frame(matrix(NA,ncol=2,nrow=ntrials));names(df) <- c("value","corrected")
df$value[1] <- 0
for (i in 2:ntrials){
df$value[i] <- .9995 * df$value[i-1] + rnorm(1,0,.5)
}
plot(df$value)
df$corrected_value <- df$value - mean(df$value)
plot(df$corrected_value)
df$prev_corrected_value <- lag(df$corrected_value)
df$prev_value <- lag(df$value)
m <- lm(df$value ~ 0 + df$prev_value)
m_corrected <- lm(df$corrected$value ~ df$prev_corrected_value)
m_corrected <- lm(df$corrected_value ~ df$prev_corrected_value)
m_corrected
m_corrected <- lm(df$corrected_value ~0 + df$prev_corrected_value)
m_corrected
library(dplyr)
ntrials = 500
df <- data.frame(matrix(NA,ncol=2,nrow=ntrials));names(df) <- c("value","corrected")
df$value[1] <- 0
for (i in 2:ntrials){
df$value[i] <- .99 * df$value[i-1] + rnorm(1,0,.5)
}
plot(df$value)
df$corrected_value <- df$value - mean(df$value)
plot(df$corrected_value)
df$prev_corrected_value <- lag(df$corrected_value)
df$prev_value <- lag(df$value)
m <- lm(df$value ~ 0 + df$prev_value)
m_corrected <- lm(df$corrected_value ~0 + df$prev_corrected_value)
m_corrected
library(dplyr)
ntrials = 500
df <- data.frame(matrix(NA,ncol=2,nrow=ntrials));names(df) <- c("value","corrected")
df$value[1] <- 0
for (i in 2:ntrials){
df$value[i] <- .5 * df$value[i-1] + rnorm(1,0,.5)
}
plot(df$value)
df$corrected_value <- df$value - mean(df$value)
plot(df$corrected_value)
df$prev_corrected_value <- lag(df$corrected_value)
df$prev_value <- lag(df$value)
m <- lm(df$value ~ 0 + df$prev_value)
m_corrected <- lm(df$corrected_value ~0 + df$prev_corrected_value)
m
m_corrected
m <- lm(df$value ~ df$prev_value)
m
m_corrected <- lm(df$corrected_value ~ df$prev_corrected_value)
m_corrected
mean(df$value)
library(dplyr)
ntrials = 5000
df <- data.frame(matrix(NA,ncol=2,nrow=ntrials));names(df) <- c("value","corrected")
df$value[1] <- 0
for (i in 2:ntrials){
df$value[i] <- .9 * df$value[i-1] + rnorm(1,0,.5)
}
plot(df$value)
df$corrected_value <- df$value - mean(df$value)
plot(df$corrected_value)
df$prev_corrected_value <- lag(df$corrected_value)
df$prev_value <- lag(df$value)
m <- lm(df$value ~ df$prev_value)
m_corrected <- lm(df$corrected_value ~ df$prev_corrected_value)
m_corrected
library(dplyr)
ntrials = 5000
df <- data.frame(matrix(NA,ncol=2,nrow=ntrials));names(df) <- c("value","corrected")
df$value[1] <- 0
for (i in 2:ntrials){
df$value[i] <- .9 * df$value[i-1] + rnorm(1,0,.5)
}
plot(df$value)
df$corrected_value <- df$value + mean(df$value)
plot(df$corrected_value)
df$prev_corrected_value <- lag(df$corrected_value)
df$prev_value <- lag(df$value)
m <- lm(df$value ~ df$prev_value)
m_corrected <- lm(df$corrected_value ~ df$prev_corrected_value)
m_corrected
m_corrected <- lm(df$corrected_value ~ 0 + df$prev_corrected_value)
m_corrected
library(dplyr)
ntrials = 5000
df <- data.frame(matrix(NA,ncol=2,nrow=ntrials));names(df) <- c("value","corrected")
df$value[1] <- 0
for (i in 2:ntrials){
df$value[i] <- .9 * df$value[i-1] + rnorm(1,0,.5)
}
plot(df$value)
df$corrected_value <- df$value + 2
plot(df$corrected_value)
df$prev_corrected_value <- lag(df$corrected_value)
df$prev_value <- lag(df$value)
m <- lm(df$value ~ df$prev_value)
m_corrected <- lm(df$corrected_value ~ 0 + df$prev_corrected_value)
m_corrected
library(dplyr)
ntrials = 5000
df <- data.frame(matrix(NA,ncol=2,nrow=ntrials));names(df) <- c("value","corrected")
df$value[1] <- 0
for (i in 2:ntrials){
df$value[i] <- .9 * df$value[i-1] + rnorm(1,0,.5)
}
plot(df$value)
df$corrected_value <- df$value - 2
plot(df$corrected_value)
df$prev_corrected_value <- lag(df$corrected_value)
df$prev_value <- lag(df$value)
m <- lm(df$value ~ df$prev_value)
m_corrected <- lm(df$corrected_value ~ 0 + df$prev_corrected_value)
m_corrected
library(rstudioapi)
library(ggplot2)
library(readr)
library(grid)
library(gridExtra)
curdir <- dirname(getSourceEditorContext()$path)
setwd(curdir)
df <- read_csv("param_recovery_prevrespconf_noSys.csv")
p_sens <- ggplot(df, aes(x=as.factor(ntrials), y=sens_fit, col = as.factor(ntrials))) +
geom_hline(yintercept=df$sens_sim) +
geom_point(position = position_dodge(0.1)) +
theme_bw() +
ylim(c(5,15)) +
stat_summary(geom = "point",fun = "mean",col = "black",size = 3,shape = 24,fill = "red") +
labs(x = "Number of trials", y = "Perceptual sensitivity") +
theme(legend.position="none")
p_bias <- ggplot(df, aes(x=as.factor(ntrials), y=bias_fit, col = as.factor(ntrials))) +
geom_hline(yintercept=df$bias_sim) +
geom_point(position = position_dodge(.1)) +
theme_bw() +
ylim(c(-5,5)) +
stat_summary(geom = "point",fun = "mean",col = "black",size = 3,shape = 24,fill = "red") +
labs(x = "Number of trials", y = "Intercept") +
theme(legend.position="none")
p_sigma <- ggplot(df, aes(x=as.factor(ntrials), y=sigma_fit, col = as.factor(ntrials))) +
geom_hline(yintercept=df$sigma_sim) +
geom_point(position = position_dodge(.1)) +
theme_bw() +
#ylim(c(0,.8)) +
labs(x = "Number of trials", y = "Sigma") +
stat_summary(geom = "point",fun = "mean",col = "black",size = 3,shape = 24,fill = "red") +
theme(legend.position="none")
p_resp <- ggplot(df, aes(x=as.factor(ntrials), y=prevresp_fit, col = as.factor(ntrials))) +
geom_hline(yintercept=df$prevresp_sim) +
geom_point(position = position_dodge(0.1)) +
theme_bw() +
ylim(c(-1,1)) +
stat_summary(geom = "point",fun = "mean",col = "black",size = 3,shape = 24,fill = "red") +
labs(x = "Number of trials", y = "Prev. resp") +
theme(legend.position="none")
mean(df$prevresp_fit[df$ntrials==50000])
p_conf <- ggplot(df, aes(x=as.factor(ntrials), y=prevconf_fit, col = as.factor(ntrials))) +
geom_hline(yintercept=df$prevconf_sim) +
geom_point(position = position_dodge(0.1)) +
theme_bw() +
ylim(c(-1,1)) +
stat_summary(geom = "point",fun = "mean",col = "black",size = 3,shape = 24,fill = "red") +
labs(x = "Number of trials", y = "Prev. conf") +
theme(legend.position="none")
mean(df$prevconf_fit[df$ntrials==10000])
p_respconf <- ggplot(df, aes(x=as.factor(ntrials), y=prevrespconf_fit, col = as.factor(ntrials))) +
geom_hline(yintercept=df$prevrespconf_sim) +
geom_point(position = position_dodge(0.1)) +
theme_bw() +
ylim(c(-1,1)) +
stat_summary(geom = "point",fun = "mean",col = "black",size = 3,shape = 24,fill = "red") +
labs(x = "Number of trials", y = "Prev. resp * prev. conf") +
theme(legend.position="none")
mean(df$prevrespconf_fit[df$ntrials==50000])
p_sign <- ggplot(df, aes(x=as.factor(ntrials), y=prevsignevi_fit, col = as.factor(ntrials))) +
geom_hline(yintercept=df$prevsignevi_sim) +
geom_point(position = position_dodge(0.1)) +
theme_bw() +
ylim(c(-1,1)) +
stat_summary(geom = "point",fun = "mean",col = "black",size = 3,shape = 24,fill = "red") +
labs(x = "Number of trials", y = "Prev. sign evi") +
theme(legend.position="none")
p_absevi <- ggplot(df, aes(x=as.factor(ntrials), y=prevabsevi_fit, col = as.factor(ntrials))) +
geom_hline(yintercept=df$prevabsevi_sim) +
geom_point(position = position_dodge(0.1)) +
theme_bw() +
ylim(c(-1,1)) +
stat_summary(geom = "point",fun = "mean",col = "black",size = 3,shape = 24,fill = "red") +
labs(x = "Number of trials", y = "Prev. abs evi") +
theme(legend.position="none")
p_signabsevi <- ggplot(df, aes(x=as.factor(ntrials), y=prevsignabsevi_fit, col = as.factor(ntrials))) +
geom_hline(yintercept=df$prevsignabsevi_sim) +
geom_point(position = position_dodge(0.1)) +
theme_bw() +
ylim(c(-1,1)) +
stat_summary(geom = "point",fun = "mean",col = "black",size = 3,shape = 24,fill = "red") +
labs(x = "Number of trials", y = "Prev. sign * prev. abs evi") +
theme(legend.position="none")
mean(df$prevsignabsevi_fit[df$ntrials==10000])
p_C <- ggplot(df, aes(x=C_fit, y=sigma_fit)) +
geom_hline(yintercept=df$sigma_sim) +
geom_point(col="blue") +
#ylim(c(0,.75)) +
#scale_x_continuous(breaks=c(-1,0,1)) +
theme_bw() +
facet_grid(~ntrials) +
labs(x = "C", y = "Sigma") +
theme(legend.position="none")
grid.arrange(p_sens,p_bias,p_resp,p_conf,p_respconf,p_sign,p_absevi,p_signabsevi,p_sigma, ncol = 3)
p_respconf <- ggplot(df, aes(x=as.factor(ntrials), y=prevrespconf_fit, col = as.factor(ntrials))) +
geom_hline(yintercept=df$prevrespconf_sim) +
geom_point(position = position_dodge(0.1)) +
theme_bw() +
#ylim(c(-1,1)) +
stat_summary(geom = "point",fun = "mean",col = "black",size = 3,shape = 24,fill = "red") +
labs(x = "Number of trials", y = "Prev. resp * prev. conf") +
theme(legend.position="none")
p_respconf
